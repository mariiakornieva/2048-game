{"version":3,"sources":["scripts/main.js"],"names":["gameField","document","querySelector","tBodies","startButton","messageStart","messageLose","messageWin","scoreHTML","GameField","cells","Array","from","MAX_ROWS","MAX_COLS","fill","score","forEach","row","splice","length","count","available","availableCells","generate","index","Math","floor","random","position","value","PROBABILITY","INIT_VALUE_HIGH_PROBABILITY","INIT_VALUE_LOW_PROBABILITY","col","i","direction","rotate","ROTATION","to","wasMoved","move","rotatedField","rotated","rotatedRow","push","idx","filter","cell","collapseCells","concat","some","cellIdx","movePossible","movePossibleHorizontal","movePossibleVertical","MAX_ROTATION","j","rows","rowIdx","className","cellValue","classList","add","textContent","includes","WIN_SCORE","noCellsAvailable","isMovePossible","reduce","map","Game","field","reset","generateNewCells","render","hasWon","onGameOver","hasLost","tryMoveCells","checkGameOver","game","onStart","e","target","matches","contains","remove","body","addEventListener","onKeyDown","start","lose","removeEventListener","code","replace","handleKeyDown"],"mappings":"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","file":"main.bc086873.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst gameField = document.querySelector('.game-field').tBodies[0];\nconst startButton = document.querySelector('.controls .button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst scoreHTML = document.querySelector('.game-score');\n\nclass GameField {\n  constructor() {\n    this.cells = Array.from(\n      Array(GameField.MAX_ROWS), () => new Array(GameField.MAX_COLS).fill(0)\n    );\n    this.score = 0;\n  }\n\n  get availableCells() {\n    return this.cells.reduce((available, row, rowIdx) => {\n      return available.concat(\n        row.map((cell, cellIdx) => {\n          return {\n            row: rowIdx,\n            col: cellIdx,\n            value: cell,\n          };\n        }).filter(cell => cell.value === 0)\n      );\n    }, []);\n  }\n\n  reset() {\n    this.cells.forEach(row => {\n      row.splice(0, row.length, ...Array(GameField.MAX_COLS).fill(0));\n    });\n    this.score = 0;\n  }\n\n  generateNewCells(count = 1) {\n    const available = this.availableCells;\n\n    const generate = () => {\n      if (!available.length) {\n        return;\n      }\n\n      const index = Math.floor(Math.random() * available.length);\n      const [ position ] = available.splice(index, 1);\n      const value = Math.random() < GameField.PROBABILITY\n        ? GameField.INIT_VALUE_HIGH_PROBABILITY\n        : GameField.INIT_VALUE_LOW_PROBABILITY;\n\n      this.cells[position.row][position.col] = value;\n    };\n\n    for (let i = 0; i < count; i++) {\n      generate();\n    }\n  }\n\n  tryMoveCells(direction) {\n    this.rotate(GameField.ROTATION[direction].to);\n\n    const wasMoved = this.move();\n\n    this.rotate(GameField.ROTATION[direction].from);\n\n    return wasMoved;\n  }\n\n  rotate(count = 1) {\n    const rotatedField = () => {\n      const rotated = [];\n\n      for (let col = 0; col < GameField.MAX_COLS; col++) {\n        const rotatedRow = [];\n\n        for (let row = GameField.MAX_ROWS - 1; row >= 0; row--) {\n          rotatedRow.push(this.cells[row][col]);\n        }\n\n        rotated.push(rotatedRow);\n      }\n\n      return rotated;\n    };\n\n    for (let i = 0; i < count; i++) {\n      this.cells = rotatedField();\n    }\n  }\n\n  move() {\n    let wasMoved = false;\n\n    for (let idx = 0; idx < GameField.MAX_ROWS; idx++) {\n      let row = this.cells[idx].filter(cell => cell !== 0);\n\n      this.collapseCells(row);\n      row = row.concat(Array(GameField.MAX_COLS - row.length).fill(0));\n\n      wasMoved = wasMoved\n        || row.some((cell, cellIdx) => cell !== this.cells[idx][cellIdx]);\n\n      this.cells[idx] = row;\n    }\n\n    return wasMoved;\n  }\n\n  isMovePossible() {\n    const movePossible = () => {\n      return this.cells.some(row => {\n        for (let i = 1; i < row.length; i++) {\n          if (row[i] === row[i - 1]) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n    };\n\n    const movePossibleHorizontal = movePossible();\n\n    this.rotate();\n\n    const movePossibleVertical = movePossible();\n\n    this.rotate(GameField.MAX_ROTATION - 1);\n\n    return movePossibleHorizontal || movePossibleVertical;\n  }\n\n  collapseCells(row) {\n    for (let j = 0; j < row.length - 1; j++) {\n      if (row[j] === row[j + 1]) {\n        row[j] *= 2;\n        this.score += row[j];\n        row.splice(j + 1, 1);\n      }\n    }\n  }\n\n  render() {\n    [...gameField.rows].forEach((row, rowIdx) => {\n      [...row.cells].forEach((cell, cellIdx) => {\n        cell.className = 'field-cell';\n\n        const cellValue = this.cells[rowIdx][cellIdx];\n\n        if (cellValue !== 0) {\n          cell.classList.add(`field-cell--${cellValue}`);\n          cell.textContent = cellValue;\n        } else {\n          cell.textContent = '';\n        }\n      });\n    });\n\n    scoreHTML.textContent = this.score;\n  }\n\n  hasWon() {\n    return this.cells.some(row => row.includes(GameField.WIN_SCORE));\n  }\n\n  hasLost() {\n    const noCellsAvailable = this.availableCells.length === 0;\n\n    return noCellsAvailable && !this.isMovePossible();\n  }\n}\n\nGameField.MAX_ROWS = 4;\nGameField.MAX_COLS = 4;\nGameField.WIN_SCORE = 2048;\nGameField.PROBABILITY = 0.9;\nGameField.INIT_VALUE_HIGH_PROBABILITY = 2;\nGameField.INIT_VALUE_LOW_PROBABILITY = 4;\nGameField.MAX_ROTATION = 4;\n\nGameField.ROTATION = {\n  'Down': {\n    to: 1,\n    from: 3,\n  },\n  'Up': {\n    to: 3,\n    from: 1,\n  },\n  'Left': {\n    to: 0,\n    from: 0,\n  },\n  'Right': {\n    to: 2,\n    from: 2,\n  },\n};\n\nclass Game {\n  constructor() {\n    this.field = new GameField();\n  }\n\n  start() {\n    this.reset();\n    this.field.generateNewCells(2);\n    this.render();\n  }\n\n  render() {\n    this.field.render();\n  }\n\n  reset() {\n    this.field.reset();\n\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  }\n\n  checkGameOver() {\n    if (this.field.hasWon()) {\n      onGameOver();\n\n      return;\n    }\n\n    if (this.field.hasLost()) {\n      onGameOver(true);\n    }\n  }\n\n  handleKeyDown(direction) {\n    if (!this.field.tryMoveCells(direction)) {\n      return;\n    }\n\n    this.field.generateNewCells();\n    this.checkGameOver();\n    this.render();\n  }\n}\n\nconst game = new Game();\n\nstartButton.addEventListener('click', onStart);\n\nfunction onStart(e) {\n  if (!e.target.matches('.button')) {\n    return;\n  }\n\n  if (e.target.classList.contains('start')) {\n    e.target.classList.remove('start');\n    e.target.classList.add('restart');\n    e.target.textContent = 'Restart';\n\n    document.body.addEventListener('keydown', onKeyDown);\n  }\n\n  game.start();\n}\n\nfunction onGameOver(lose = false) {\n  document.body.removeEventListener('keydown', onKeyDown);\n\n  if (lose) {\n    messageLose.classList.remove('hidden');\n  } else {\n    messageWin.classList.remove('hidden');\n  }\n\n  startButton.classList.remove('restart');\n  startButton.classList.add('start');\n  startButton.textContent = 'Start';\n}\n\nfunction onKeyDown(e) {\n  if (!['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.code)) {\n    return;\n  }\n\n  const direction = e.code.replace('Arrow', '');\n\n  game.handleKeyDown(direction);\n}\n"]}